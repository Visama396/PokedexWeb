---
import { capitalize } from "../utils/capitalize";
const { pokemon, type1, type2 } = Astro.props

let get_damage_relations_type1, get_damage_relations_type2
let types = {
    'normal': 1,
    'fire': 1,
    'water': 1,
    'electric': 1,
    'grass': 1,
    'ice': 1,
    'fighting': 1,
    'poison': 1,
    'ground': 1,
    'flying': 1,
    'psychic': 1,
    'bug': 1,
    'rock': 1,
    'ghost': 1,
    'dragon': 1,
    'dark': 1,
    'steel': 1,
    'fairy': 1
}
let keys = Object.keys(types)

get_damage_relations_type1 = await fetch(`https://pokeapi.co/api/v2/type/${type1}`).then(response => response.json())

for (const type of get_damage_relations_type1.damage_relations.double_damage_from) {
    types[type.name] *= 2
}

for (const type of get_damage_relations_type1.damage_relations.half_damage_from) {
    types[type.name] /= 2
}

for (const type of get_damage_relations_type1.damage_relations.no_damage_from) {
    types[type.name] *= 0
}

if (type2) {
    get_damage_relations_type2 = await fetch(`https://pokeapi.co/api/v2/type/${type2}`).then(response => response.json())

    for (const type of get_damage_relations_type2.damage_relations.double_damage_from) {
        types[type.name] *= 2
    }

    for (const type of get_damage_relations_type2.damage_relations.half_damage_from) {
        types[type.name] /= 2
    }

    for (const type of get_damage_relations_type2.damage_relations.no_damage_from) {
        types[type.name] *= 0
    }
}

function getColorByTypeValue(value) {
    if (value == 0) return "text-yellow-200/30"
    if (value == 1) return "text-[white]"
    if (value < 1) return "text-[green]"
    if (value > 1) return "text-[red]"
}

function getTextByTypeValue(value) {
    /*if (value == 0.25) return 'x¼'
    if (value == 0.5) return 'x½'*/
    return 'x'+value
}
---
<section>
    <h2 class="text-4xl mb-2 font-black">Type defenses</h2>
    <p>The effectiveness of each type on {capitalize(pokemon)}</p>
    <section class="grid xl:grid-cols-9 grid-cols-6 xl:gap-2 md:gap-4 gap-8">
        {keys.map(type => (
            <div class="type-effective">
                <picture>
                    <img class="max-w-[64px]" src={`/${type}.svg`} alt={type}>
                </picture>
                <p class={`font-black text-center ${getColorByTypeValue(types[type])}`}>
                    {getTextByTypeValue(types[type])}
                </p>
            </div>
        ))}
    </section>
</section>