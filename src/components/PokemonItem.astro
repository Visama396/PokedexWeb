---
export interface Props {
  id: string
  url: string
  title: string
  img: string
}

const {id, url, title, img} = Astro.props

const data = await fetch(url).then(response => response.json()).catch(err => console.error("Pokémon not found. Cause: Url of data is not working."))
---
<a 
  class="grid justify-center place-content-end transition-all rounded-lg w-full h-full pb-4 gap-2 hover:scale-105 hover:shadow-2xl" 
  style={(data.types.length == 1)? `background-color: var(--${data.types[0].type.name})`: `background: linear-gradient(135deg, var(--${data.types[0].type.name}), var(--${data.types[1].type.name}))`} 
  href={`/${id}`} id={title.toLowerCase()}>
  
    <img class="object-cover mx-auto" src={img} alt={id}>
    <h1 class="font-black text-center text-2xl text-white pokemon">{title}</h1>
    <p class="text-center" style="font-weight: bold">{(data.types.length == 1)?
      <span style={`color: var(--light-${data.types[0].type.name}); text-shadow: 0 0 10px rgba(255,255,255,0.5)`}>{data.types[0].type.name}</span> : 
      <span style={`color: var(--light-${data.types[0].type.name}); text-shadow: 0 0 8px rgba(255,255,255,0.5)`}>{data.types[0].type.name}</span><span> · </span><span style={`color: var(--light-${data.types[1].type.name}); text-shadow: 0 0 8px rgba(255,255,255,0.5)`}>{data.types[1].type.name}</span>
    </p>
</a>